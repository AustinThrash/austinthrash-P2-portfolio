[
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise - Assignment #4",
    "section": "",
    "text": "# This chunk is used to load in all necessary packages for analysis.\n\nlibrary(MASS)\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(ggplot2)\nlibrary(simstudy)\n\nWarning: package 'simstudy' was built under R version 4.3.3\n\nlibrary(caret)\n\nLoading required package: lattice\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nThe following object is masked from 'package:gridExtra':\n\n    combine\n\nlibrary(class)\n\n\n\n\nI was not sure how many variables to generate for the synthetic dataset, so I only defined seven variables, 5 categorical, and 3 numerical. Here are the variables I generated:\n\n\n\n\nVariable\nDefinition\n\n\n\n\nHeight\nNormal Distribution, in pounds.\n\n\nWeight\nNormal Distribution, in inches\n\n\nBMI\nGenerated using weight and height\n\n\nis_smoker\n30/70 split, Categorical (yes/no)\n\n\nhealth_lifestyle\n50/50 split, Categorical (yes/no)\n\n\nphysical_active\n1 to 8 scale, Categorical\n\n\ndiff_walk\n20/80 split, Categorical (yes/no)\n\n\nstroke\nCategorical (yes/no), 10% have strokes\n\n\n\n\n#This chunk of code defines variables using the defData() function. The chunk defines height, weight, BMI, is_smoker, health_lifestyle, physical_active, diff_walk, and stroke. These variables will be used to generate a dataset with a 1000 observations.\n\n# Define the data structure\ndef &lt;- defData(varname = \"height\", dist = \"normal\", formula = 66, variance = 10)  # Height in inches, average 5'6\"\ndef &lt;- defData(def, varname = \"weight\", dist = \"normal\", formula = 150, variance = 25)  # Weight in pounds\ndef &lt;- defData(def, varname = \"is_smoker\", dist = \"categorical\", formula = \"0.3;0.7\")  # 30% smokers, 70% non-smokers\ndef &lt;- defData(def, varname = \"healthy_lifestyle\", dist = \"categorical\", formula = \"0.5;0.5\")  # 50% healthy, 50% not\ndef &lt;- defData(def, varname = \"physical_active\", dist = \"uniformInt\", formula = \"1;8\")  # Physical activity level, 1-8 scale\ndef &lt;- defData(def, varname = \"diff_walk\", dist = \"categorical\", formula = \"0.2;0.8\")  # 20% have difficulty walking, 80% don't\n\ndef &lt;- defData(def, varname = \"stroke\", dist = \"binary\", formula = 0.5)  # 50% have had a stroke - Doing this for a balanced dataset\n\n# Add the BMI variable which depends on height and weight\ndef &lt;- defData(def, varname = \"BMI\", dist = \"nonrandom\", formula = \"703 * weight / (height ^ 2)\")\n\n# Generate the synthetic data\nset.seed(123)  # For reproducibility\nsynth_data &lt;- genData(1000, def)  # Generate 1000 records\n\n\n\n\n\n# This chunk is used to display a summary of the synthetic dataset that was generated.\n\nsynth_data &lt;- as.data.frame(synth_data)\n\nsummary(synth_data)\n\n       id             height          weight        is_smoker    \n Min.   :   1.0   Min.   :57.11   Min.   :134.8   Min.   :1.000  \n 1st Qu.: 250.8   1st Qu.:64.01   1st Qu.:146.7   1st Qu.:1.000  \n Median : 500.5   Median :66.03   Median :150.3   Median :2.000  \n Mean   : 500.5   Mean   :66.05   Mean   :150.2   Mean   :1.718  \n 3rd Qu.: 750.2   3rd Qu.:68.10   3rd Qu.:153.8   3rd Qu.:2.000  \n Max.   :1000.0   Max.   :76.25   Max.   :167.0   Max.   :2.000  \n healthy_lifestyle physical_active   diff_walk         stroke     \n Min.   :1.000     Min.   :1.000   Min.   :1.000   Min.   :0.000  \n 1st Qu.:1.000     1st Qu.:3.000   1st Qu.:2.000   1st Qu.:0.000  \n Median :2.000     Median :4.000   Median :2.000   Median :0.000  \n Mean   :1.507     Mean   :4.469   Mean   :1.802   Mean   :0.493  \n 3rd Qu.:2.000     3rd Qu.:6.000   3rd Qu.:2.000   3rd Qu.:1.000  \n Max.   :2.000     Max.   :8.000   Max.   :2.000   Max.   :1.000  \n      BMI       \n Min.   :18.07  \n 1st Qu.:22.69  \n Median :24.23  \n Mean   :24.36  \n 3rd Qu.:25.81  \n Max.   :32.34  \n\n\n\n\n\n\n\n\n# This chunk of code includes a function to compile all of the plots generated into one list so they could all be viewed together in one image.\n\n# Function to create histograms for each variable\ncreate_histograms &lt;- function(data) {\n  plots &lt;- list()\n  for (col_name in names(data)) {\n    if (is.numeric(data[[col_name]])) {\n      p &lt;- ggplot(data, aes_string(x = col_name)) + \n        geom_histogram(binwidth = 1, fill = \"salmon\", color = \"black\") +\n        labs(title = col_name) +\n        theme_minimal()\n    } else {\n      p &lt;- ggplot(data, aes_string(x = col_name)) + \n        geom_bar(fill = \"salmon\", color = \"black\") +\n        labs(title = col_name) +\n        theme_minimal()\n    }\n    plots[[col_name]] &lt;- p\n  }\n  return(plots)\n}\n\n# Create histograms for all variables\nhistograms &lt;- create_histograms(synth_data)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n# Arrange the plots in a grid\nn &lt;- length(histograms)\nnCol &lt;- ceiling(sqrt(n))\nnRow &lt;- ceiling(n / nCol)\ncombined_plot &lt;- marrangeGrob(grobs = histograms, nrow = nRow, ncol = nCol)\n\ncombined_plot\n\n\n\n\nHere we can see a distribution of all of our variables. One thing that can be noted is that the response variable (stroke) is evenly distributed which should help the results of our models.\n\n\n\n\n# Select only the numerical variables for the correlation matrix\nnumerical_vars &lt;- synth_data[, c(\"height\", \"weight\", \"BMI\", \"physical_active\")]\n\n# Calculate the correlation matrix\ncorrelation_matrix &lt;- cor(numerical_vars)\n\n# Print the correlation matrix\ncorrplot(correlation_matrix, method = \"color\", type = \"upper\", order = \"hclust\",\n         tl.col = \"black\", tl.srt = 45, addCoef.col = \"black\", number.cex = 0.5)\n\n\n\n\nFrom the correlation matrix, we can see some correlation between BMI and height as well as BMI and weight. However this make sense as BMI is calculated using both height and weight. The correlation between the other variables looks very minimal.\n\n\n\n\n# Convert categorical variables to factors\nsynth_data$is_smoker &lt;- factor(synth_data$is_smoker, labels = c(\"Yes\", \"No\"))\nsynth_data$healthy_lifestyle &lt;- factor(synth_data$healthy_lifestyle, labels = c(\"Yes\", \"No\"))\nsynth_data$diff_walk &lt;- factor(synth_data$diff_walk, labels = c(\"Yes\", \"No\"))\nsynth_data$stroke &lt;- factor(synth_data$stroke, labels = c(\"Yes\", \"No\"))\nsynth_data$physical_active &lt;- as.factor(synth_data$physical_active)\n\n# Fit an initial model\ninitial_model &lt;- glm(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk, \n                     data = synth_data, \n                     family = binomial)\n\n# Perform stepwise selection\nstepwise_model &lt;- stepAIC(initial_model, direction = \"both\")\n\nStart:  AIC=1406.82\nstroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + \n    physical_active + diff_walk\n\n                    Df Deviance    AIC\n- physical_active    7   1383.3 1397.3\n- height             1   1378.9 1404.9\n- BMI                1   1378.9 1404.9\n- diff_walk          1   1379.0 1405.0\n- weight             1   1379.0 1405.0\n- is_smoker          1   1379.7 1405.7\n- healthy_lifestyle  1   1379.9 1405.9\n&lt;none&gt;                   1378.8 1406.8\n\nStep:  AIC=1397.3\nstroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + \n    diff_walk\n\n                    Df Deviance    AIC\n- height             1   1383.4 1395.4\n- BMI                1   1383.4 1395.4\n- diff_walk          1   1383.5 1395.5\n- weight             1   1383.5 1395.5\n- is_smoker          1   1384.0 1396.0\n- healthy_lifestyle  1   1384.3 1396.3\n&lt;none&gt;                   1383.3 1397.3\n+ physical_active    7   1378.8 1406.8\n\nStep:  AIC=1395.36\nstroke ~ weight + BMI + is_smoker + healthy_lifestyle + diff_walk\n\n                    Df Deviance    AIC\n- BMI                1   1383.5 1393.5\n- diff_walk          1   1383.6 1393.6\n- is_smoker          1   1384.0 1394.0\n- weight             1   1384.2 1394.2\n- healthy_lifestyle  1   1384.3 1394.3\n&lt;none&gt;                   1383.4 1395.4\n+ height             1   1383.3 1397.3\n+ physical_active    7   1378.9 1404.9\n\nStep:  AIC=1393.48\nstroke ~ weight + is_smoker + healthy_lifestyle + diff_walk\n\n                    Df Deviance    AIC\n- diff_walk          1   1383.7 1391.7\n- is_smoker          1   1384.1 1392.1\n- weight             1   1384.2 1392.2\n- healthy_lifestyle  1   1384.4 1392.4\n&lt;none&gt;                   1383.5 1393.5\n+ BMI                1   1383.4 1395.4\n+ height             1   1383.4 1395.4\n+ physical_active    7   1379.0 1403.0\n\nStep:  AIC=1391.67\nstroke ~ weight + is_smoker + healthy_lifestyle\n\n                    Df Deviance    AIC\n- is_smoker          1   1384.3 1390.3\n- weight             1   1384.4 1390.4\n- healthy_lifestyle  1   1384.6 1390.6\n&lt;none&gt;                   1383.7 1391.7\n+ diff_walk          1   1383.5 1393.5\n+ BMI                1   1383.6 1393.6\n+ height             1   1383.6 1393.6\n+ physical_active    7   1379.2 1401.2\n\nStep:  AIC=1390.34\nstroke ~ weight + healthy_lifestyle\n\n                    Df Deviance    AIC\n- weight             1   1385.1 1389.1\n- healthy_lifestyle  1   1385.3 1389.3\n&lt;none&gt;                   1384.3 1390.3\n+ is_smoker          1   1383.7 1391.7\n+ diff_walk          1   1384.1 1392.1\n+ BMI                1   1384.2 1392.2\n+ height             1   1384.2 1392.2\n+ physical_active    7   1380.0 1400.0\n\nStep:  AIC=1389.06\nstroke ~ healthy_lifestyle\n\n                    Df Deviance    AIC\n- healthy_lifestyle  1   1386.1 1388.1\n&lt;none&gt;                   1385.1 1389.1\n+ weight             1   1384.3 1390.3\n+ is_smoker          1   1384.4 1390.4\n+ diff_walk          1   1384.9 1390.9\n+ height             1   1384.9 1390.9\n+ BMI                1   1385.0 1391.0\n+ physical_active    7   1380.5 1398.5\n\nStep:  AIC=1388.1\nstroke ~ 1\n\n                    Df Deviance    AIC\n&lt;none&gt;                   1386.1 1388.1\n+ healthy_lifestyle  1   1385.1 1389.1\n+ weight             1   1385.3 1389.3\n+ is_smoker          1   1385.4 1389.4\n+ diff_walk          1   1385.9 1389.9\n+ height             1   1386.0 1390.0\n+ BMI                1   1386.1 1390.1\n+ physical_active    7   1381.7 1397.7\n\n# Print the summary of the final model\nsummary(stepwise_model)\n\n\nCall:\nglm(formula = stroke ~ 1, family = binomial, data = synth_data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept) -0.02800    0.06325  -0.443    0.658\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1386.1  on 999  degrees of freedom\nResidual deviance: 1386.1  on 999  degrees of freedom\nAIC: 1388.1\n\nNumber of Fisher Scoring iterations: 3\n\n\nIn this synthetic dataset, it looks as if healthy_lifestyle has the strongest correlation with the response variable (stoke). This was discovered using stepwise selection model going in both directions. Although healthy_lifestyle does not have a statistically significant p-value we can not conclude that there is a statistical significant relationship between this feature and the response variable. Even though this is the case, we will keep this variable in mind when modeling.\n\n\n\n\nFor the statistical analysis, we will first setup the training control, then we will train logistic regression, random forest, and KNN models.\n\n# Define the training control\ntrain_control &lt;- trainControl(method = \"cv\", number = 5)  # 10-fold cross-validation\n\n\n\n\nlog_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                   data = synth_data, \n                   method = \"glm\", \n                   family = \"binomial\",\n                   trControl = train_control)\n\nprint(log_model)\n\nGeneralized Linear Model \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 799, 800, 801, 799, 801 \nResampling results:\n\n  Accuracy   Kappa      \n  0.4790898  -0.04408229\n\n\n\n\n\nsummary(log_model)\n\n\nCall:\nNULL\n\nCoefficients:\n                    Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)          1.85412   13.90362   0.133    0.894\nheight              -0.05227    0.20825  -0.251    0.802\nweight               0.02189    0.04705   0.465    0.642\nBMI                 -0.07875    0.28075  -0.281    0.779\nis_smokerNo         -0.13029    0.14139  -0.921    0.357\nhealthy_lifestyleNo  0.13490    0.12750   1.058    0.290\nphysical_active2     0.42886    0.26191   1.637    0.102\nphysical_active3     0.17191    0.25238   0.681    0.496\nphysical_active4     0.24392    0.24246   1.006    0.314\nphysical_active5    -0.00574    0.25768  -0.022    0.982\nphysical_active6     0.10652    0.24859   0.429    0.668\nphysical_active7     0.30128    0.25648   1.175    0.240\nphysical_active8     0.16435    0.25916   0.634    0.526\ndiff_walkNo          0.06568    0.15978   0.411    0.681\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1386.1  on 999  degrees of freedom\nResidual deviance: 1378.8  on 986  degrees of freedom\nAIC: 1406.8\n\nNumber of Fisher Scoring iterations: 3\n\n\nFrom the results we can see that the logistic regression model achieved an accuracy of 47.90%, which is worse than random chance\n\n\n\n\n\nrf_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                  data = synth_data, \n                  method = \"rf\", \n                  trControl = train_control,\n                  importance = TRUE)\n\n\n\n\nprint(rf_model)\n\nRandom Forest \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 800, 799, 800, 800, 801 \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa       \n   2    0.4920649  -0.017776906\n   7    0.4929848  -0.014797849\n  13    0.4969348  -0.006716948\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 13.\n\n\nThe random forest model achieved an accuracy of 51.29%, this is pretty similar to the logistic regression model, not much improvement has occurred.\n\n\n\n\n\n# K-Nearest Neighbors\nknn_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                   data = synth_data, \n                   method = \"knn\", \n                   trControl = train_control,\n                   tuneLength = 10)  # can change to try different k values\n\n\n\n\nprint(knn_model)\n\nk-Nearest Neighbors \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 801, 800, 800, 800, 799 \nResampling results across tuning parameters:\n\n  k   Accuracy   Kappa     \n   5  0.5319606  0.06294648\n   7  0.5180006  0.03427891\n   9  0.5269805  0.05280882\n  11  0.5289604  0.05677899\n  13  0.5349603  0.06900349\n  15  0.5289403  0.05660205\n  17  0.5349953  0.06914110\n  19  0.5520256  0.10327857\n  21  0.5379905  0.07520355\n  23  0.5440306  0.08704269\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was k = 19.\n\n\nWe can see from the results of the KNN model that this method achieved an accuracy of 53.19%, with the best K value being 5. This is not much of an improvement to the previous model.\n\n\n\n\n\n\n# This chunk gets max accuracy from each model, builds a data frame of the accuracies, and then creates a bar plot. The bar plot will display the three models and include a label of the accuracy.\n\n# Extract accuracy from the models\nlog_accuracy &lt;- max(log_model$results$Accuracy)\nrf_accuracy &lt;- max(rf_model$results$Accuracy)\nknn_accuracy &lt;- max(knn_model$results$Accuracy)\n\n# Create a data frame for the accuracies\naccuracy_df &lt;- data.frame(\n  Model = c(\"Logistic Regression\", \"Random Forest\", \"K-Nearest Neighbors\"),\n  Accuracy = c(log_accuracy, rf_accuracy, knn_accuracy)\n)\n\n# Plot the accuracies using ggplot2\nggplot(accuracy_df, aes(x = Model, y = Accuracy, fill = Model)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  geom_text(aes(label = round(Accuracy, 4)), vjust = -0.5) +\n  labs(title = \"Model Accuracy Comparison\",\n       x = \"Model\",\n       y = \"Accuracy\") +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\nFrom the results we can see that KNN performed the best overall, however its accuracy is only 53.2%, meaning this is only slightly better than random chance. This could be due to the fact that there are not very many predictors in that data or the fact that all this data is generated synthetically. All the predictors displayed a normal distribution so it could be possible that the data is too normal and doesn’t display much variance. Here are some ways to maybe improve the data to get better results (however, altering the data generation to improve results kinda defeats the purpose of statistical analysis as you are artificially guiding the narrative by creating the data solely to improve results):\n\nAdding more predictors\nAdding more randomness/variance to the data\nAdding more observations\nTrying different models."
  },
  {
    "objectID": "data-exercise/data-exercise.html#exploratory-analysis",
    "href": "data-exercise/data-exercise.html#exploratory-analysis",
    "title": "Data Exercise - Assignment #4",
    "section": "",
    "text": "# This chunk of code includes a function to compile all of the plots generated into one list so they could all be viewed together in one image.\n\n# Function to create histograms for each variable\ncreate_histograms &lt;- function(data) {\n  plots &lt;- list()\n  for (col_name in names(data)) {\n    if (is.numeric(data[[col_name]])) {\n      p &lt;- ggplot(data, aes_string(x = col_name)) + \n        geom_histogram(binwidth = 1, fill = \"salmon\", color = \"black\") +\n        labs(title = col_name) +\n        theme_minimal()\n    } else {\n      p &lt;- ggplot(data, aes_string(x = col_name)) + \n        geom_bar(fill = \"salmon\", color = \"black\") +\n        labs(title = col_name) +\n        theme_minimal()\n    }\n    plots[[col_name]] &lt;- p\n  }\n  return(plots)\n}\n\n# Create histograms for all variables\nhistograms &lt;- create_histograms(synth_data)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n# Arrange the plots in a grid\nn &lt;- length(histograms)\nnCol &lt;- ceiling(sqrt(n))\nnRow &lt;- ceiling(n / nCol)\ncombined_plot &lt;- marrangeGrob(grobs = histograms, nrow = nRow, ncol = nCol)\n\ncombined_plot\n\n\n\n\nHere we can see a distribution of all of our variables. One thing that can be noted is that the response variable (stroke) is evenly distributed which should help the results of our models.\n\n\n\n\n# Select only the numerical variables for the correlation matrix\nnumerical_vars &lt;- synth_data[, c(\"height\", \"weight\", \"BMI\", \"physical_active\")]\n\n# Calculate the correlation matrix\ncorrelation_matrix &lt;- cor(numerical_vars)\n\n# Print the correlation matrix\ncorrplot(correlation_matrix, method = \"color\", type = \"upper\", order = \"hclust\",\n         tl.col = \"black\", tl.srt = 45, addCoef.col = \"black\", number.cex = 0.5)\n\n\n\n\nFrom the correlation matrix, we can see some correlation between BMI and height as well as BMI and weight. However this make sense as BMI is calculated using both height and weight. The correlation between the other variables looks very minimal.\n\n\n\n\n# Convert categorical variables to factors\nsynth_data$is_smoker &lt;- factor(synth_data$is_smoker, labels = c(\"Yes\", \"No\"))\nsynth_data$healthy_lifestyle &lt;- factor(synth_data$healthy_lifestyle, labels = c(\"Yes\", \"No\"))\nsynth_data$diff_walk &lt;- factor(synth_data$diff_walk, labels = c(\"Yes\", \"No\"))\nsynth_data$stroke &lt;- factor(synth_data$stroke, labels = c(\"Yes\", \"No\"))\nsynth_data$physical_active &lt;- as.factor(synth_data$physical_active)\n\n# Fit an initial model\ninitial_model &lt;- glm(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk, \n                     data = synth_data, \n                     family = binomial)\n\n# Perform stepwise selection\nstepwise_model &lt;- stepAIC(initial_model, direction = \"both\")\n\nStart:  AIC=1406.82\nstroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + \n    physical_active + diff_walk\n\n                    Df Deviance    AIC\n- physical_active    7   1383.3 1397.3\n- height             1   1378.9 1404.9\n- BMI                1   1378.9 1404.9\n- diff_walk          1   1379.0 1405.0\n- weight             1   1379.0 1405.0\n- is_smoker          1   1379.7 1405.7\n- healthy_lifestyle  1   1379.9 1405.9\n&lt;none&gt;                   1378.8 1406.8\n\nStep:  AIC=1397.3\nstroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + \n    diff_walk\n\n                    Df Deviance    AIC\n- height             1   1383.4 1395.4\n- BMI                1   1383.4 1395.4\n- diff_walk          1   1383.5 1395.5\n- weight             1   1383.5 1395.5\n- is_smoker          1   1384.0 1396.0\n- healthy_lifestyle  1   1384.3 1396.3\n&lt;none&gt;                   1383.3 1397.3\n+ physical_active    7   1378.8 1406.8\n\nStep:  AIC=1395.36\nstroke ~ weight + BMI + is_smoker + healthy_lifestyle + diff_walk\n\n                    Df Deviance    AIC\n- BMI                1   1383.5 1393.5\n- diff_walk          1   1383.6 1393.6\n- is_smoker          1   1384.0 1394.0\n- weight             1   1384.2 1394.2\n- healthy_lifestyle  1   1384.3 1394.3\n&lt;none&gt;                   1383.4 1395.4\n+ height             1   1383.3 1397.3\n+ physical_active    7   1378.9 1404.9\n\nStep:  AIC=1393.48\nstroke ~ weight + is_smoker + healthy_lifestyle + diff_walk\n\n                    Df Deviance    AIC\n- diff_walk          1   1383.7 1391.7\n- is_smoker          1   1384.1 1392.1\n- weight             1   1384.2 1392.2\n- healthy_lifestyle  1   1384.4 1392.4\n&lt;none&gt;                   1383.5 1393.5\n+ BMI                1   1383.4 1395.4\n+ height             1   1383.4 1395.4\n+ physical_active    7   1379.0 1403.0\n\nStep:  AIC=1391.67\nstroke ~ weight + is_smoker + healthy_lifestyle\n\n                    Df Deviance    AIC\n- is_smoker          1   1384.3 1390.3\n- weight             1   1384.4 1390.4\n- healthy_lifestyle  1   1384.6 1390.6\n&lt;none&gt;                   1383.7 1391.7\n+ diff_walk          1   1383.5 1393.5\n+ BMI                1   1383.6 1393.6\n+ height             1   1383.6 1393.6\n+ physical_active    7   1379.2 1401.2\n\nStep:  AIC=1390.34\nstroke ~ weight + healthy_lifestyle\n\n                    Df Deviance    AIC\n- weight             1   1385.1 1389.1\n- healthy_lifestyle  1   1385.3 1389.3\n&lt;none&gt;                   1384.3 1390.3\n+ is_smoker          1   1383.7 1391.7\n+ diff_walk          1   1384.1 1392.1\n+ BMI                1   1384.2 1392.2\n+ height             1   1384.2 1392.2\n+ physical_active    7   1380.0 1400.0\n\nStep:  AIC=1389.06\nstroke ~ healthy_lifestyle\n\n                    Df Deviance    AIC\n- healthy_lifestyle  1   1386.1 1388.1\n&lt;none&gt;                   1385.1 1389.1\n+ weight             1   1384.3 1390.3\n+ is_smoker          1   1384.4 1390.4\n+ diff_walk          1   1384.9 1390.9\n+ height             1   1384.9 1390.9\n+ BMI                1   1385.0 1391.0\n+ physical_active    7   1380.5 1398.5\n\nStep:  AIC=1388.1\nstroke ~ 1\n\n                    Df Deviance    AIC\n&lt;none&gt;                   1386.1 1388.1\n+ healthy_lifestyle  1   1385.1 1389.1\n+ weight             1   1385.3 1389.3\n+ is_smoker          1   1385.4 1389.4\n+ diff_walk          1   1385.9 1389.9\n+ height             1   1386.0 1390.0\n+ BMI                1   1386.1 1390.1\n+ physical_active    7   1381.7 1397.7\n\n# Print the summary of the final model\nsummary(stepwise_model)\n\n\nCall:\nglm(formula = stroke ~ 1, family = binomial, data = synth_data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept) -0.02800    0.06325  -0.443    0.658\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1386.1  on 999  degrees of freedom\nResidual deviance: 1386.1  on 999  degrees of freedom\nAIC: 1388.1\n\nNumber of Fisher Scoring iterations: 3\n\n\nIn this synthetic dataset, it looks as if healthy_lifestyle has the strongest correlation with the response variable (stoke). This was discovered using stepwise selection model going in both directions. Although healthy_lifestyle does not have a statistically significant p-value we can not conclude that there is a statistical significant relationship between this feature and the response variable. Even though this is the case, we will keep this variable in mind when modeling."
  },
  {
    "objectID": "data-exercise/data-exercise.html#statistical-analysis",
    "href": "data-exercise/data-exercise.html#statistical-analysis",
    "title": "Data Exercise - Assignment #4",
    "section": "",
    "text": "For the statistical analysis, we will first setup the training control, then we will train logistic regression, random forest, and KNN models.\n\n# Define the training control\ntrain_control &lt;- trainControl(method = \"cv\", number = 5)  # 10-fold cross-validation\n\n\n\n\nlog_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                   data = synth_data, \n                   method = \"glm\", \n                   family = \"binomial\",\n                   trControl = train_control)\n\nprint(log_model)\n\nGeneralized Linear Model \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 799, 800, 801, 799, 801 \nResampling results:\n\n  Accuracy   Kappa      \n  0.4790898  -0.04408229\n\n\n\n\n\nsummary(log_model)\n\n\nCall:\nNULL\n\nCoefficients:\n                    Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)          1.85412   13.90362   0.133    0.894\nheight              -0.05227    0.20825  -0.251    0.802\nweight               0.02189    0.04705   0.465    0.642\nBMI                 -0.07875    0.28075  -0.281    0.779\nis_smokerNo         -0.13029    0.14139  -0.921    0.357\nhealthy_lifestyleNo  0.13490    0.12750   1.058    0.290\nphysical_active2     0.42886    0.26191   1.637    0.102\nphysical_active3     0.17191    0.25238   0.681    0.496\nphysical_active4     0.24392    0.24246   1.006    0.314\nphysical_active5    -0.00574    0.25768  -0.022    0.982\nphysical_active6     0.10652    0.24859   0.429    0.668\nphysical_active7     0.30128    0.25648   1.175    0.240\nphysical_active8     0.16435    0.25916   0.634    0.526\ndiff_walkNo          0.06568    0.15978   0.411    0.681\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1386.1  on 999  degrees of freedom\nResidual deviance: 1378.8  on 986  degrees of freedom\nAIC: 1406.8\n\nNumber of Fisher Scoring iterations: 3\n\n\nFrom the results we can see that the logistic regression model achieved an accuracy of 47.90%, which is worse than random chance\n\n\n\n\n\nrf_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                  data = synth_data, \n                  method = \"rf\", \n                  trControl = train_control,\n                  importance = TRUE)\n\n\n\n\nprint(rf_model)\n\nRandom Forest \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 800, 799, 800, 800, 801 \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa       \n   2    0.4920649  -0.017776906\n   7    0.4929848  -0.014797849\n  13    0.4969348  -0.006716948\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 13.\n\n\nThe random forest model achieved an accuracy of 51.29%, this is pretty similar to the logistic regression model, not much improvement has occurred.\n\n\n\n\n\n# K-Nearest Neighbors\nknn_model &lt;- train(stroke ~ height + weight + BMI + is_smoker + healthy_lifestyle + physical_active + diff_walk,\n                   data = synth_data, \n                   method = \"knn\", \n                   trControl = train_control,\n                   tuneLength = 10)  # can change to try different k values\n\n\n\n\nprint(knn_model)\n\nk-Nearest Neighbors \n\n1000 samples\n   7 predictor\n   2 classes: 'Yes', 'No' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 801, 800, 800, 800, 799 \nResampling results across tuning parameters:\n\n  k   Accuracy   Kappa     \n   5  0.5319606  0.06294648\n   7  0.5180006  0.03427891\n   9  0.5269805  0.05280882\n  11  0.5289604  0.05677899\n  13  0.5349603  0.06900349\n  15  0.5289403  0.05660205\n  17  0.5349953  0.06914110\n  19  0.5520256  0.10327857\n  21  0.5379905  0.07520355\n  23  0.5440306  0.08704269\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was k = 19.\n\n\nWe can see from the results of the KNN model that this method achieved an accuracy of 53.19%, with the best K value being 5. This is not much of an improvement to the previous model."
  },
  {
    "objectID": "data-exercise/data-exercise.html#analysis-results",
    "href": "data-exercise/data-exercise.html#analysis-results",
    "title": "Data Exercise - Assignment #4",
    "section": "",
    "text": "# This chunk gets max accuracy from each model, builds a data frame of the accuracies, and then creates a bar plot. The bar plot will display the three models and include a label of the accuracy.\n\n# Extract accuracy from the models\nlog_accuracy &lt;- max(log_model$results$Accuracy)\nrf_accuracy &lt;- max(rf_model$results$Accuracy)\nknn_accuracy &lt;- max(knn_model$results$Accuracy)\n\n# Create a data frame for the accuracies\naccuracy_df &lt;- data.frame(\n  Model = c(\"Logistic Regression\", \"Random Forest\", \"K-Nearest Neighbors\"),\n  Accuracy = c(log_accuracy, rf_accuracy, knn_accuracy)\n)\n\n# Plot the accuracies using ggplot2\nggplot(accuracy_df, aes(x = Model, y = Accuracy, fill = Model)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  geom_text(aes(label = round(Accuracy, 4)), vjust = -0.5) +\n  labs(title = \"Model Accuracy Comparison\",\n       x = \"Model\",\n       y = \"Accuracy\") +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\nFrom the results we can see that KNN performed the best overall, however its accuracy is only 53.2%, meaning this is only slightly better than random chance. This could be due to the fact that there are not very many predictors in that data or the fact that all this data is generated synthetically. All the predictors displayed a normal distribution so it could be possible that the data is too normal and doesn’t display much variance. Here are some ways to maybe improve the data to get better results (however, altering the data generation to improve results kinda defeats the purpose of statistical analysis as you are artificially guiding the narrative by creating the data solely to improve results):\n\nAdding more predictors\nAdding more randomness/variance to the data\nAdding more observations\nTrying different models."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# This chunk of code loads in the dslabs package, we will be using the gapminder dataset for this execise.\n\n# Using library() to load dslabs package\nlibrary(\"dslabs\")\n\n\n\n\n\n# This chunk involves pulling up the help page for the gapminder dataset. This will give us an overview of the dataset and what it contains.\n\n# Using help() to view help page\nhelp(gapminder)\n\n\n\n\n\n# In this chunk we will be using the str and summary function to look at the data.\n\n# Using str() to display the internal structure of the dataset\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n# Using summary() to produce result summary of values\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\n\n\n\n# This chunk outputs the object type of the 'gapminder' dataset.\n\n# Using class() to print object type of 'gapminder'\nclass(gapminder)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "href": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# This chunk of code loads in the dslabs package, we will be using the gapminder dataset for this execise.\n\n# Using library() to load dslabs package\nlibrary(\"dslabs\")\n\n\n\n\n\n# This chunk involves pulling up the help page for the gapminder dataset. This will give us an overview of the dataset and what it contains.\n\n# Using help() to view help page\nhelp(gapminder)\n\n\n\n\n\n# In this chunk we will be using the str and summary function to look at the data.\n\n# Using str() to display the internal structure of the dataset\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n# Using summary() to produce result summary of values\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\n\n\n\n# This chunk outputs the object type of the 'gapminder' dataset.\n\n# Using class() to print object type of 'gapminder'\nclass(gapminder)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#processing-data",
    "href": "coding-exercise/coding-exercise.html#processing-data",
    "title": "R Coding Exercise",
    "section": "0.2 Processing Data",
    "text": "0.2 Processing Data\n\n# This chunk of code loads in the tidyverse package, creates a new dataset called 'africadata', and then prints the structure and a summary of data\n\n# Using the library() function again, but this time loading in the 'tidyverse' package\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Using tidyverse to filter the gapminder dataset where continent equals Africa\nafricadata &lt;- gapminder %&gt;% filter(continent == \"Africa\")\n\n# Printing the structure of the dataset\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# Printing a summary of the dataset\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n# This chunk will create two new datasets using the four 3 variables mentioned in the assignment instructions.\n\n# Using the gapminder dataset to filter and select the correct columns (infant_mortality & life_expectancy)\np1_africadata &lt;- gapminder %&gt;% \n  # Filtering the data to only include the continent, Africa.\n  filter(continent == \"Africa\") %&gt;% \n  # Selecting the columns we want\n  select(infant_mortality, life_expectancy)\n\n# Doing the same processes as before, filtering and selecting the proper columns (population & life_expectancy)\np2_africadata &lt;- gapminder %&gt;% \n  # Filtering the data to only include the continent, Africa.\n  filter(continent == \"Africa\") %&gt;% \n  # Selecting the columns we want\n  select(population, life_expectancy)\n\n# str() and summary() to look at the data in both new objects/datasets\n# P1 Dataset\nstr(p1_africadata)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(p1_africadata)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n# P2 Dataset\nstr(p2_africadata)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(p2_africadata)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting",
    "href": "coding-exercise/coding-exercise.html#plotting",
    "title": "R Coding Exercise",
    "section": "0.3 Plotting",
    "text": "0.3 Plotting\n\n0.3.1 Life Expectancy vs Infant Mortality\n\n# This chunk generates a plot when displaying life_expectancy as a function of infant_mortality The plot is stored in a variable and is displayed using a print function.\n\n# Creating the plot, x-axis is infant_mortality and the y-axis is life_expectancy.\nplot1 &lt;- ggplot(p1_africadata, aes(x = infant_mortality, y = life_expectancy)) + \n  # Specifying this as a scatterplot or point graph\n  geom_point() + \n  # Adding labels to the graph/axis\n  labs(title = \"Life Expectancy vs Infant Mortality\", \n       x = \"Infant Mortality\", \n       y = \"Life Expectancy\")\n\n# Printing plot\nprint(plot1)\n\nWarning: Removed 226 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n0.3.2 Life Expectancy vs Population Size (Log Scale)\n\n# This chunk generates a plot when displaying life_expectancy as a function of population. The plot is stored in a variable and is displayed using a print function.\n\n# Creating the plot, x-axis is population and the y-axis is life_expectancy.\nplot2 &lt;- ggplot(p2_africadata, aes(x = population, y = life_expectancy)) + \n  # Specifying this as a scatterplot or point graph\n  geom_point() + \n  # Setting the x-axis to log scale\n  scale_x_log10() + \n  # Adding labels to graph/axis\n  labs(title = \"Life Expectancy vs Population Size (Log Scale)\", \n       x = \"Population Size (Log Scale)\", \n       y = \"Life Expectancy\")\n\n# Printing plot\nprint(plot2)\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n0.3.3 ‘Streaks’ of Data\nThe plots above exhibit ‘streaks’ of data, this could be due to the fact that there is a ‘year’ column in the dataset, meaning that if a country has multiple years of data, that country will appear on the graph for each year this data was recorded thus creating ‘streaks’ on the plot. We can visualize this by using the color option in ggplot to highlight the different countries.\n\n# This chunk creates the same plot as above, however makes use of the color option in ggplot to highlight each country. This is to illustrate how having a time variable creates the streaks in the plots\n\n# Creating the plot and storing it in the plot3 variable\nplot3 &lt;- ggplot(africadata, aes(x = population, y = life_expectancy, colour = country)) + \n  # Setting as scatterplot/point graph\n  geom_point() + \n  # Applying log scale to x-axis\n  scale_x_log10() + \n  # Adding labels to graph\n  labs(title = \"Life Expectancy vs Population Size (Log Scale)\", \n       x = \"Population Size (Log Scale)\", \n       y = \"Life Expectancy\")\n\n# Printing plot\nprint(plot3)\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-data-processing",
    "href": "coding-exercise/coding-exercise.html#more-data-processing",
    "title": "R Coding Exercise",
    "section": "0.4 More Data Processing",
    "text": "0.4 More Data Processing\n\n0.4.1 Years with missing data\n\n# This chunk displays which years having missing data for infant mortality, it uses the tidyverse package to filter and select the proper years. The years are then printed using a print function.\n\n# Finding the years in africadata that having missing values for infant mortality a storing it in the variable missing_years\nmissing_years &lt;- africadata %&gt;%\n  # Filtering data to find NA values in infant_mortality\n  filter(is.na(infant_mortality)) %&gt;%\n  # Selecting the 'year' value that has NA values in infant_mortality\n  select(year) %&gt;%\n  # Applying distinct so the years don't duplicate and are distinct\n  distinct()\n\n# Printing years with missing values in infant_mortality\nprint(missing_years)\n\n   year\n1  1960\n2  1961\n3  1962\n4  1963\n5  1964\n6  1965\n7  1966\n8  1967\n9  1968\n10 1969\n11 1970\n12 1971\n13 1972\n14 1973\n15 1974\n16 1975\n17 1976\n18 1977\n19 1978\n20 1979\n21 1980\n22 1981\n23 2016\n\n\nWe can see that there are missing values for infant_mortality for every year up to 1981 and then again in 2016. Seeing as those include missing values, we should avoid those years and use the year suggested in the assignment instructions, 2000.\n\n\n0.4.2 2000 Africa Data\n\n# This chunk creates a new dataset featuring only the continent, Africa, and the year 2000. This will be saved under the variable africadata_2000.\n\n# Filtering and saving the proper data into the new variable.\nafricadata_2000 &lt;- gapminder %&gt;% \n  # Filtering the data to only include the continent and year, Africa and 2000.\n  filter(continent == \"Africa\" & year == 2000)\n\n# Displaying the structure of the new dataset\nstr(africadata_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# Displaying a summary of the data\nsummary(africadata_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-plotting",
    "href": "coding-exercise/coding-exercise.html#more-plotting",
    "title": "R Coding Exercise",
    "section": "0.5 More Plotting",
    "text": "0.5 More Plotting\n\n0.5.1 Life Expectancy vs Infant Mortality\n\n# This chunk generates a plot when displaying life_expectancy as a function of infant_mortality for the year 2000 in africa. The plot is stored in a variable and is displayed using a print function.\n\n# Creating the plot, x-axis is infant_mortality and the y-axis is life_expectancy.\nplot4 &lt;- ggplot(africadata_2000, aes(x = infant_mortality, y = life_expectancy)) + \n  # Specifying this as a scatterplot or point graph\n  geom_point() + \n  # Adding labels to the graph/axis\n  labs(title = \"Life Expectancy vs Infant Mortality\", \n       x = \"Infant Mortality\", \n       y = \"Life Expectancy\")\n\n# Printing plot\nprint(plot4)\n\n\n\n\n\n\n0.5.2 Life Expectancy vs Population Size (Log Scale)\n\n# This chunk generates a plot when displaying life_expectancy as a function of population. The plot is stored in a variable and is displayed using a print function.\n\n# Creating the plot, x-axis is population and the y-axis is life_expectancy.\nplot5 &lt;- ggplot(africadata_2000, aes(x = population, y = life_expectancy)) + \n  # Specifying this as a scatterplot or point graph\n  geom_point() + \n  # Setting the x-axis to log scale\n  scale_x_log10() + \n  # Adding labels to graph/axis\n  labs(title = \"Life Expectancy vs Population Size (Log Scale)\", \n       x = \"Population Size (Log Scale)\", \n       y = \"Life Expectancy\")\n\n# Printing plot\nprint(plot5)\n\n\n\n\nBased on those plots, there seems to still be a negative correlation between infant mortality and life expectancy, and no noticeable correlation between population size and life expectancy."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#simple-model-fits",
    "href": "coding-exercise/coding-exercise.html#simple-model-fits",
    "title": "R Coding Exercise",
    "section": "0.6 Simple Model Fits",
    "text": "0.6 Simple Model Fits\n\n0.6.1 Fit 1: Life Expectancy ~ Infant Mortality\n\n# This chunk of code involves fitting life expectancy as the outcome and infant mortality as the predictor. The model is saved to the new variables fit1 and then a summary of the model is printed using summary()\n\n# Fit 1: Life Expectancy as a function of Infant Mortality\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africadata_2000)\n\n# Printing a summary of the model\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n\nFrom the result of this model, we can see that for each unit increase in infant_mortality, there is a 0.18916 decrease in life_expectancy. If we look at the p-value, we can conclude that infant_mortality has a statistically significant relationship with life_expectancy.\n\n\n0.6.2 Fit 2: Life Expectancy ~ Population\n\n# This chunk of code involves fitting life expectancy as the outcome and population as the predictor. The model is saved to the new variables fit2 and then a summary of the model is printed using summary()\n\n# Fit 1: Life Expectancy as a function of Population\nfit2 &lt;- lm(life_expectancy ~ population, data = africadata_2000)\n\n# Printing a summary of the model\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nUnlike the previous model, the p-value for population leads us to the conclusion that there is no statistically significant relationship between population and life_expectancy. Therefore, the population variable may not be a good predictor to use in this model unless it’s modeled using a different method(like taking the log or interaction terms using ‘*’)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#this-section-contributed-by-nicholas-stevenson",
    "href": "coding-exercise/coding-exercise.html#this-section-contributed-by-nicholas-stevenson",
    "title": "R Coding Exercise",
    "section": "1.1 This section contributed by Nicholas Stevenson",
    "text": "1.1 This section contributed by Nicholas Stevenson\nPick another dataset from dslabs, whichever one you want. Unfortunately, the dslabs package doesn’t have a nice website. But you can go to its offical CRAN entryLinks to an external site. and click on Reference Manual. The pdf lists the various other datasets and for each provides a brief explanation.\nOnce you chose one of the datasets, write R code to go through similar steps as above. Specifically, do the following:\n1. Explore the dataset\n\n# Load the dataset\ndata(\"murders\")\n\n# Display the first few rows of the dataset\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65\n\n\n2. Do any processing/cleaning you want to do.\n\n# Add a murder rate column (murders per 100,000)\nmurders &lt;- murders %&gt;% \n  mutate(murder_rate = total / population * 100000)\n\n# Display the first few rows with the new column\nhead(murders)\n\n       state abb region population total murder_rate\n1    Alabama  AL  South    4779736   135    2.824424\n2     Alaska  AK   West     710231    19    2.675186\n3    Arizona  AZ   West    6392017   232    3.629527\n4   Arkansas  AR  South    2915918    93    3.189390\n5 California  CA   West   37253956  1257    3.374138\n6   Colorado  CO   West    5029196    65    1.292453\n\n\n3. Make a few exploratory figures. Optionally, also some tables.\n\n# Total murders by region\nggplot(murders, aes(x = region, y = total)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Total Murders by Region\", x = \"Region\", y = \"Total Murders\") +\n  theme_minimal()\n\n\n\n\n\n# Murder rate by state\nggplot(murders, aes(x = reorder(state, murder_rate), y = murder_rate)) +\n  geom_bar(stat = \"identity\", fill = \"darkred\") +\n  coord_flip() +\n  labs(title = \"Murder Rate by State\", x = \"State\", y = \"Murder Rate (per 100,000)\") +\n  theme_minimal()\n\n\n\n\n\n# Summary statistics by region\nsummary_table &lt;- murders %&gt;% \n  group_by(region) %&gt;% \n  summarize(\n    total_murders = sum(total),\n    avg_murder_rate = mean(murder_rate),\n    median_murder_rate = median(murder_rate)\n  )\nsummary_table\n\n# A tibble: 4 × 4\n  region        total_murders avg_murder_rate median_murder_rate\n  &lt;fct&gt;                 &lt;dbl&gt;           &lt;dbl&gt;              &lt;dbl&gt;\n1 Northeast              1469            1.85               1.80\n2 South                  4195            4.42               3.40\n3 North Central          1828            2.18               1.97\n4 West                   1911            1.83               1.29\n\n\n4. Run some simple statistical model(s). Your choice.\n\n# Fit the linear regression model\nfit &lt;- lm(murder_rate ~ population, data = murders)\n\n# Summary of the model\nsummary(fit)\n\n\nCall:\nlm(formula = murder_rate ~ population, data = murders)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.2762 -1.4347 -0.2191  0.5561 13.8577 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 2.575e+00  4.640e-01   5.549 1.15e-06 ***\npopulation  3.363e-08  5.092e-08   0.661    0.512    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.47 on 49 degrees of freedom\nMultiple R-squared:  0.008825,  Adjusted R-squared:  -0.0114 \nF-statistic: 0.4363 on 1 and 49 DF,  p-value: 0.512\n\n\n5. Report the results from the model(s).\nThe p-value for the population coefficient (0.512) is much greater than 0.05, indicating that the relationship between population size and murder rate is not statistically significant."
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Hey there, I’m Austin Thrash. I grew up in Amarillo, Texas, and went to a high school with just 71 classmates. It was during those years that I fell in love with computer science and decided to chase my dreams in tech.\nAfter high school, I moved to San Antonio to study at The University of Texas at San Antonio, where I earned my bachelor’s degree in computer science. During my undergrad, I discovered a passion for data science, which led me to pursue an MSDA.\nThroughout my graduate studies, I’ve worked on a variety of projects, from market segmentation to predictive modeling using neural networks. I’m excited to keep learning new methods and techniques to sharpen my data analysis skills even more."
  },
  {
    "objectID": "aboutme.html#photos-i-like",
    "href": "aboutme.html#photos-i-like",
    "title": "About me",
    "section": "Photos I Like",
    "text": "Photos I Like\n\n\n\n\n\n\n\n\nMy graduation ft. my parents\nMy cat, Yoshimi\nMy girlfriend and I"
  },
  {
    "objectID": "aboutme.html#links",
    "href": "aboutme.html#links",
    "title": "About me",
    "section": "Links",
    "text": "Links\nI couldn’t really find anything that I thought was too interesting, however I want to recommend the book we used last semester, “An Introduction to Statistical Learning”. I found it super useful in most situations.\nhttps://www.statlearning.com/\nI also had already created a portfolio website during my computer science degree if you’d like to check that out as well!\nhttps://thrashsoftware.com/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "Hello!\n\nMy name is Austin Thrash, I am a Software Engineer/Data Analyst with a love for creating and learning new things.\n\n\n\n\n\nWelcome to my data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future data/results presentation exercise."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Nicholas Stevenson contributed to this exercise - Assignment #2"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nThe data originally consisted of 3 variables, “Height”, “Weight”, and “Gender”. I added two new variables to the dataset, “Blood_type” (Categorical) and “BMI” (Numeric)."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section.\nThis is example data given to us by our professor, we were instructed to add two new variables to the dataset. Here is a break down of the dataset:\n\n\n\nVariable\nType\nDescription\n\n\n\n\nHeight\nNumeric\nHeight of respondent\n\n\nWeight\nNumeric\nWeight of respondent\n\n\nGender\nCategorical\nGender of respondent\n\n\nBlood_type\nCategorical\nBlood Type\n\n\nBMI\nNumeric\nBody Mass Index\n\n\n\nBy looking at the data that is already present in the dataset, we can see some glaring issues that will need fixed. This issues include incorrect value types (“sixty” instead of “60” in height), extreme values (7000 in Weight), and missing/incorrect values (present in Weight and Gender). The data for our new variables (Blood_type and BMI) are missing as well, however these values may be filled in later."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUpdated during Assignment #2 - Updated table\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\ncharacter.min\ncharacter.max\ncharacter.empty\ncharacter.n_unique\ncharacter.whitespace\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\ncharacter\nBlood_type\n0\n1\n2\n3\n0\n6\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\ncharacter\nBMI\n0\n1\n2\n4\n0\n9\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nGender\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nUpdated during Assignment #2 - Added figures\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\n?@fig-result shows a scatterplot figure produced by one of the R scripts.\n\nknitr::include_graphics(here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Blood_type-Height.png\"))\n\n\n\n\n\nknitr::include_graphics(here(\"starter-analysis-exercise\",\"results\",\"figures\",\"BMI-weight.png\"))\n\n\n\n\nAbove we can see figures for Height and Blood_type (Boxplot), and BMI and weight (Scatterplot). From the box plot we can see the variance in height within and between different blood type groups. Since the dataset is so small, the graph is not exhibiting high variance within groups due to the fact that there are only so many respondents in each group. However from the boxplot, we can see that AB- and O+ experience the most variance within their respective groups. The scatterplot of BMI and Weight help us understand the relationship between the two variables. From the figure, we can notice a slight linear increase, as weight increase so does BMI, which is to be expected in this type of scenario."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "Exploratory Analysis Script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/austin/Desktop/Practicum2/austinthrash-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                2     \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Blood_type            0             1   2   3     0        6          0\n2 BMI                   0             1   2   4     0        9          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n#boxplot with new variable\np5 &lt;- mydata %&gt;% ggplot(aes(x=Blood_type, y=Height)) + geom_boxplot()\nplot(p5)\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Blood_type-Height.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\n\n#scatter plot with new variable\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=BMI)) + geom_point()\nplot(p6)\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"BMI-weight.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/austin/Desktop/Practicum2/austinthrash-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                2     \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Blood_type            0             1   2   3     0        6          0\n2 BMI                   0             1   2   4     0        9          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/austin/Desktop/Practicum2/austinthrash-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Blood_type      Blood Type                            AB+/AB-/O+/O-/A+/A-/B+/…\n5 BMI             Body Mass Index                       numeric value &gt;0 or NA  \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height     &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"15…\n$ Weight     &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender     &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\"…\n$ Blood_type &lt;chr&gt; \"O+\", \"AB-\", \"AB+\", \"B-\", \"A-\", \"B-\", \"B+\", \"O-\", \"A+\", \"A+…\n$ BMI        &lt;chr&gt; \"24.7\", \"22.9\", \"166.7\", \"24\", \"24.4\", \"27.8\", \"37\", \"39.9\"…\n\nsummary(rawdata)\n\n    Height              Weight          Gender           Blood_type       \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n     BMI           \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Blood_type BMI  \n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;\n1 180        80 M      O+         24.7 \n2 175        70 O      AB-        22.9 \n3 sixty      60 F      AB+        166.7\n4 178        76 F      B-         24   \n5 192        90 NA     A-         24.4 \n6 6          55 F      B-         27.8 \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n14\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n13\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n13\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n4\n0\n11\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n4\n0\n11\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nBlood_type\n0\n1\n2\n3\n0\n6\n0\n\n\nBMI\n0\n1\n2\n4\n0\n9\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/austin/Desktop/Practicum2/austinthrash-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Blood_type      Blood Type                            AB+/AB-/O+/O-/A+/A-/B+/…\n5 BMI             Body Mass Index                       numeric value &gt;0 or NA  \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height     &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"15…\n$ Weight     &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender     &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\"…\n$ Blood_type &lt;chr&gt; \"O+\", \"AB-\", \"AB+\", \"B-\", \"A-\", \"B-\", \"B+\", \"O-\", \"A+\", \"A+…\n$ BMI        &lt;chr&gt; \"24.7\", \"22.9\", \"166.7\", \"24\", \"24.4\", \"27.8\", \"37\", \"39.9\"…\n\nsummary(rawdata)\n\n    Height              Weight          Gender           Blood_type       \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n     BMI           \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Blood_type BMI  \n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;\n1 180        80 M      O+         24.7 \n2 175        70 O      AB-        22.9 \n3 sixty      60 F      AB+        166.7\n4 178        76 F      B-         24   \n5 192        90 NA     A-         24.4 \n6 6          55 F      B-         27.8 \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n14\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n13\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n5\n0\n13\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000)\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n4\n0\n11\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) \n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nBlood_type\n0\n1\n2\n3\n0\n8\n0\n\n\nBMI\n0\n1\n2\n4\n0\n11\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nBlood_type\n0\n1\n2\n3\n0\n6\n0\n\n\nBMI\n0\n1\n2\n4\n0\n9\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Austin Thrash - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  }
]